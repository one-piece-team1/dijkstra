# Orb 'circleci/node@3.0.1' resolved to 'circleci/node@3.0.1'
version: 2
jobs:
  build:
    docker:
    - image: cimg/node:13.11
    working_directory: ~/one-piece-dijkstra
    steps:
    - checkout
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          # FUNCTIONS
          get_npm_version () {
            if [[ latest == latest ]]; then
              NPM_ORB_VERSION="$(npm view npm | sed -E 's|.*-||g' | grep latest | \
                perl -pe 's/.*: //g' | perl -pe "s/'|,//g")"

              echo "Latest version of NPM is $NPM_ORB_VERSION"
            else
              NPM_ORB_VERSION=latest

              echo "Selected version of NPM is $NPM_ORB_VERSION"
            fi
          }

          installation_check () {
            if command -v npm > /dev/null 2>&1; then
              if npm -v | grep "$NPM_ORB_VERSION" > /dev/null 2>&1; then
                echo "NPM $NPM_ORB_VERSION is already installed"
                exit 0
              fi
            fi
          }

          get_npm_version
            installation_check

            if [[ latest == latest ]]; then
              $SUDO npm install -g npm@latest > /dev/null 2>&1 || \
                npm install -g npm@latest > /dev/null 2>&1
            else
              $SUDO npm install -g "npm@$NPM_ORB_VERSION" > /dev/null 2>&1 || \
                npm install -g "npm@$NPM_ORB_VERSION" > /dev/null 2>&1
            fi

            # test/verify version
            if npm -v | grep "$NPM_ORB_VERSION" > /dev/null 2>&1; then
              echo "Success! NPM $(npm -v) has been installed to $(which npm)"
            else
              echo "Something went wrong; the specified version of NPM could not be installed"
              exit 1
            fi
        name: Install NPM
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/one-piece-dijkstra
    - restore_cache:
        keys:
        - node-deps-v1-{{ .Branch }}-{{ checksum "~/one-piece-dijkstra/package-lock.json" }}
    - run:
        command: |
          if [[ ! -z "sudo npm i && sudo npm i node-gyp -g" ]]; then
            echo "Running override package installation command:"
            sudo npm i && sudo npm i node-gyp -g
          else
            npm ci
          fi
        name: Installing NPM packages
        working_directory: ~/one-piece-dijkstra
    - save_cache:
        key: node-deps-v1-{{ .Branch }}-{{ checksum "~/one-piece-dijkstra/package-lock.json" }}
        paths:
        - node_modules
    - persist_to_workspace:
        root: .
        paths:
        - .
  test:
    docker:
    - image: cimg/node:current
    steps:
    - attach_workspace:
        at: .
    - run:
        name: Test
        command: sudo npm test
workflows:
  version: 2
  build_and_test:
    jobs:
    - build
    - test:
        requires:
        - build

# Original config.yml file:
# version: 2.1
# 
# orbs:
#   node: circleci/node@3.0.1
# 
# jobs:
#   build:
#     working_directory: ~/one-piece-dijkstra
#     executor: node/default
#     steps:
#       - checkout
#       - node/install-npm
#       - node/install-packages:
#           app-dir: ~/one-piece-dijkstra
#           cache-path: node_modules
#           override-ci-command: sudo npm i && sudo npm i node-gyp -g
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .
# 
#   test:
#     docker:
#       - image: cimg/node:current
#     steps:
#       - attach_workspace:
#           at: .
#       - run:
#           name: Test
#           command: sudo npm test
# 
# workflows:
#   version: 2
#   build_and_test:
#     jobs:
#       - build
#       - test:
#           requires:
#             - build